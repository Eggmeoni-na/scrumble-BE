plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.eggmeonina'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.8"
    // default path : /build/reports/jacoco/test/jacocoTestReport.xml
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // feign client
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(generated)
}
sourceSets { main.java.srcDirs += "$projectDir/src/main/generated" }

clean { delete file(generated) }

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.2"
    }
}

// report 생성 작업
tasks.jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    ['**/common/*',
                     "**/dto/*",
                     "**/*Application.class",
                     "**/*Controller.class"
                    ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

// 커버리지 측정 조건 task
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            // 룰을 체크할 단위
            element = 'CLASS'

            // 라인 커버리지를 최소 70% 만족한다.
            limit {
                // counter : 측정 대상 LINE : 실제 코드 라인 수, BRANCH : 조건문 등 분기 수
                // value : 측정 기준 COVEREDCOUNT : 커버된 개수 MISSDCOUNT :커버 되지 않은 개수
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            // 메소드 커버리지를 최소 80% 만족한다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

        }

    }
}

task testAndGenerateJacocoReport {
    group 'verification'
    description 'test w/ jacoco'

    dependsOn ':test', ':jacocoTestReport', ':jacocoTestCoverageVerification'

    tasks.jacocoTestReport.mustRunAfter tasks.test
    tasks.jacocoTestCoverageVerification.mustRunAfter tasks.jacocoTestReport
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
